const Wit = require('./src/Wit')

const wit = new Wit('AE7VQVTINGSZMIZA4YG7NTL7JV47DXTN')

wit.entity.list().then(ents => {
    console.log(ents)
})
// wit.train('numero TN556-6666', [
//       {
//         entity: "contract",
//         value: "contract_number",
//         start: 7,
//         end: 16
//       }
//     ]
// ).then(res => console.log(res))
// .catch(err => console.error(err))

// wit.forget('numero TN556-6666')
// .then(res => console.log(res))
// .catch(err => console.error(err))

// wit.entity.add('played').then((entity) => {
//     // return entity instance
//     console.log(entity)
// }).catch((e) => console.error(e))

// const commitedEntity = wit.entity('favorit_food').save().then(() => {
//     console.log(commitedEntity)
// }).catch((e) => console.error(e))
// wit.entity.list().then((entities) => {
//     var tasks = entities.map(function (e) {
//         return function (callback) {
//             e.sync().then(function () {
//                 callback(null, e)
//             }).catch(function(err) {
//                 callback(err, null)
//             })
//         }
//     })
//     async.parallelLimit(tasks, 5, function (err, entities) {
//         if (err) console.error(err);
//         console.log(entities)
//     })
// })
/**
 * 
 * const wit: {
 *   token: any;
 *   doRequest: (params: any, callback: any) => void;
 *   message: (message: any, options: any) => Promise<any>;
 *   speech: (filePath: any, options: any) => Promise<any>;
 *   value: {
 *       [x: string]: any;
 *       add: (entity: any, value: any, expressions?: any[], metadata?: string) => Promise<any>;
 *       delete: (entity: any, value: any) => Promise<any>;
 *   };
 *   expression: {
 *       [x: string]: any;
 *       add: (entity: any, value: any, expression: any) => Promise<any>;
 *       delete: (entity: any, value: any, expression: any) => Promise<any>;
 *   };
 *   train: (text: any, entities: any) => Promise<any>;
 *   app: (name: any, data: any) => {
 *       name: any;
 *       id: string;
 *       private: boolean;
 *       description: string;
 *       lang: string;
 *       created_at: string;
 *       request: any;
 *   };
 *   entity: (name: any, data: any) => {
 *       name: any;
 *       id: string;
 *       values: any[];
 *       builtin: boolean;
 *       doc: string;
 *       lang: string;
 *       lookups: any[];
 *       request: any;
 *   };
 *   intent: (result: any, options: any) => {
 *       msg_id: any;
 *       _test: any;
 *       entities: any;
 *       context: any;
 *       thread_id: string;
 *       maxConfidence: () => {
 *           [x: string]: any;
 *           confidence: number;
 *           entity: any;
 *       };
 *   };
 * }
 */